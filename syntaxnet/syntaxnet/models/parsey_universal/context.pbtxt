Parameter {
  name: "brain_tokenizer_embedding_dims"
  value: "16;16;16"
}
Parameter {
  name: "brain_tokenizer_embedding_names"
  value: "chars;digits;puncts"
}
Parameter {
  name: "brain_tokenizer_features"
  value:  "input.char "
          "input(-1).char "
          "input(1).char; "
          "input.digit "
          "input(-1).digit "
          "input(1).digit; "
          "input.punctuation-amount "
          "input(-1).punctuation-amount "
          "input(1).punctuation-amount "
}
Parameter {
  name: "brain_tokenizer_transition_system"
  value: "binary-segment-transitions"
}
Parameter {
  name: "brain_morpher_embedding_dims"
  value: "2;16;8;16;16;16;16;16;64"
}
Parameter {
  name: "brain_morpher_embedding_names"
  value: "capitalization;char_ngram;other;prefix2;prefix3;suffix2;suffix3;tags;words"
}
Parameter {
  name: "brain_morpher_features"
  value: "input.capitalization "
         "input(1).capitalization "
         "input(2).capitalization "
         "input(3).capitalization "
         "input(-1).capitalization "
         "input(-2).capitalization "
         "input(-3).capitalization "
         "input(-4).capitalization; "
         "input.token.char-ngram "
         "input(1).token.char-ngram "
         "input(2).token.char-ngram "
         "input(3).token.char-ngram "
         "input(-1).token.char-ngram "
         "input(-2).token.char-ngram "
         "input(-3).token.char-ngram "
         "input(-4).token.char-ngram; "
         "input.digit "
         "input.hyphen "
         "input.token.punctuation-amount "
         "input.token.quote; "
         "input.token.prefix(length=2) "
         "input(1).token.prefix(length=2) "
         "input(2).token.prefix(length=2) "
         "input(3).token.prefix(length=2) "
         "input(-1).token.prefix(length=2) "
         "input(-2).token.prefix(length=2) "
         "input(-3).token.prefix(length=2) "
         "input(-4).token.prefix(length=2); "
         "input.token.prefix(length=3) "
         "input(1).token.prefix(length=3) "
         "input(2).token.prefix(length=3) "
         "input(3).token.prefix(length=3) "
         "input(-1).token.prefix(length=3) "
         "input(-2).token.prefix(length=3) "
         "input(-3).token.prefix(length=3) "
         "input(-4).token.prefix(length=3); "
         "input.token.suffix(length=2) "
         "input(1).token.suffix(length=2) "
         "input(2).token.suffix(length=2) "
         "input(3).token.suffix(length=2) "
         "input(-1).token.suffix(length=2) "
         "input(-2).token.suffix(length=2) "
         "input(-3).token.suffix(length=2) "
         "input(-4).token.suffix(length=2); "
         "input.token.suffix(length=3) "
         "input(1).token.suffix(length=3) "
         "input(2).token.suffix(length=3) "
         "input(3).token.suffix(length=3) "
         "input(-1).token.suffix(length=3) "
         "input(-2).token.suffix(length=3) "
         "input(-3).token.suffix(length=3) "
         "input(-4).token.suffix(length=3); "
         "input(-1).pred-morph-tag "
         "input(-2).pred-morph-tag "
         "input(-3).pred-morph-tag "
         "input(-4).pred-morph-tag; "
         "input.token.word "
         "input(1).token.word "
         "input(2).token.word "
         "input(3).token.word "
         "input(-1).token.word "
         "input(-2).token.word "
         "input(-3).token.word "
         "input(-4).token.word"
}
Parameter {
  name: "brain_morpher_transition_system"
  value: "morpher"
}
Parameter {
  name: "brain_tagger_embedding_dims"
  value: "2;16;8;16;16;16;16;16;64"
}
Parameter {
  name: "brain_tagger_embedding_names"
  value: "capitalization;char_ngram;other;prefix2;prefix3;suffix2;suffix3;tags;words"
}
Parameter {
  name: "brain_tagger_features"
  value: "input.capitalization "
         "input(1).capitalization "
         "input(2).capitalization "
         "input(3).capitalization "
         "input(-1).capitalization "
         "input(-2).capitalization "
         "input(-3).capitalization "
         "input(-4).capitalization; "
         "input.token.char-ngram "
         "input(1).token.char-ngram "
         "input(2).token.char-ngram "
         "input(3).token.char-ngram "
         "input(-1).token.char-ngram "
         "input(-2).token.char-ngram "
         "input(-3).token.char-ngram "
         "input(-4).token.char-ngram; "
         "input.digit "
         "input.hyphen "
         "input.token.punctuation-amount "
         "input.token.quote; "
         "input.token.prefix(length=2) "
         "input(1).token.prefix(length=2) "
         "input(2).token.prefix(length=2) "
         "input(3).token.prefix(length=2) "
         "input(-1).token.prefix(length=2) "
         "input(-2).token.prefix(length=2) "
         "input(-3).token.prefix(length=2) "
         "input(-4).token.prefix(length=2); "
         "input.token.prefix(length=3) "
         "input(1).token.prefix(length=3) "
         "input(2).token.prefix(length=3) "
         "input(3).token.prefix(length=3) "
         "input(-1).token.prefix(length=3) "
         "input(-2).token.prefix(length=3) "
         "input(-3).token.prefix(length=3) "
         "input(-4).token.prefix(length=3); "
         "input.token.suffix(length=2) "
         "input(1).token.suffix(length=2) "
         "input(2).token.suffix(length=2) "
         "input(3).token.suffix(length=2) "
         "input(-1).token.suffix(length=2) "
         "input(-2).token.suffix(length=2) "
         "input(-3).token.suffix(length=2) "
         "input(-4).token.suffix(length=2); "
         "input.token.suffix(length=3) "
         "input(1).token.suffix(length=3) "
         "input(2).token.suffix(length=3) "
         "input(3).token.suffix(length=3) "
         "input(-1).token.suffix(length=3) "
         "input(-2).token.suffix(length=3) "
         "input(-3).token.suffix(length=3) "
         "input(-4).token.suffix(length=3); "
         "input(-1).pred-tag "
         "input(-2).pred-tag "
         "input(-3).pred-tag "
         "input(-4).pred-tag; "
         "input.token.word "
         "input(1).token.word "
         "input(2).token.word "
         "input(3).token.word "
         "input(-1).token.word "
         "input(-2).token.word "
         "input(-3).token.word "
         "input(-4).token.word"
}
Parameter {
  name: "brain_tagger_transition_system"
  value: "tagger"
}
Parameter {
  name: "brain_parser_embedding_dims"
  value: "32;32;32;64"
}
Parameter {
  name: "brain_parser_embedding_names"
  value: "labels;morphology;tags;words"
}
Parameter {
  name: "brain_parser_features"
  value: "stack.child(1).label "
         "stack.child(1).sibling(-1).label "
         "stack.child(-1).label "
         "stack.child(-1).sibling(1).label "
         "stack.child(2).label "
         "stack.child(-2).label "
         "stack(1).child(1).label "
         "stack(1).child(1).sibling(-1).label "
         "stack(1).child(-1).label "
         "stack(1).child(-1).sibling(1).label "
         "stack(1).child(2).label "
         "stack(1).child(-2).label; "
         "input.token.morphology-set "
         "input(1).token.morphology-set "
         "input(2).token.morphology-set "
         "input(3).token.morphology-set "
         "stack.token.morphology-set "
         "stack.child(1).token.morphology-set "
         "stack.child(1).sibling(-1).token.morphology-set "
         "stack.child(-1).token.morphology-set "
         "stack.child(-1).sibling(1).token.morphology-set "
         "stack.child(2).token.morphology-set "
         "stack.child(-2).token.morphology-set "
         "stack(1).token.morphology-set "
         "stack(1).child(1).token.morphology-set "
         "stack(1).child(1).sibling(-1).token.morphology-set "
         "stack(1).child(-1).token.morphology-set "
         "stack(1).child(-1).sibling(1).token.morphology-set "
         "stack(1).child(2).token.morphology-set "
         "stack(1).child(-2).token.morphology-set "
         "stack(2).token.morphology-set "
         "stack(3).token.morphology-set; "
         "input.token.tag "
         "input(1).token.tag "
         "input(2).token.tag "
         "input(3).token.tag "
         "stack.token.tag "
         "stack.child(1).token.tag "
         "stack.child(1).sibling(-1).token.tag "
         "stack.child(-1).token.tag "
         "stack.child(-1).sibling(1).token.tag "
         "stack.child(2).token.tag "
         "stack.child(-2).token.tag "
         "stack(1).token.tag "
         "stack(1).child(1).token.tag "
         "stack(1).child(1).sibling(-1).token.tag "
         "stack(1).child(-1).token.tag "
         "stack(1).child(-1).sibling(1).token.tag "
         "stack(1).child(2).token.tag "
         "stack(1).child(-2).token.tag "
         "stack(2).token.tag "
         "stack(3).token.tag; "
         "input.token.word "
         "input(1).token.word "
         "input(2).token.word "
         "input(3).token.word "
         "stack.token.word "
         "stack.child(1).token.word "
         "stack.child(1).sibling(-1).token.word "
         "stack.child(-1).token.word "
         "stack.child(-1).sibling(1).token.word "
         "stack.child(2).token.word "
         "stack.child(-2).token.word "
         "stack(1).token.word "
         "stack(1).child(1).token.word "
         "stack(1).child(1).sibling(-1).token.word "
         "stack(1).child(-1).token.word "
         "stack(1).child(-1).sibling(1).token.word "
         "stack(1).child(2).token.word "
         "stack(1).child(-2).token.word "
         "stack(2).token.word "
         "stack(3).token.word "
}
Parameter {
  name: "brain_parser_transition_system"
  value: "arc-standard"
}
Parameter {
  name: "join_category_to_pos"
  value: "true"
}

input {
  name: "source-word-map"
  Part {
    file_pattern: "source-word-map"
  }
}
input {
  name: "source-category-map"
  Part {
    file_pattern: "source-category-map"
  }
}
input {
  name: "source-lcword-map"
  Part {
    file_pattern: "source-lcword-map"
  }
}
input {
  name: "source-char-map"
  Part {
    file_pattern: "source-char-map"
  }
}
input {
  name: "source-tag-map"
  Part {
    file_pattern: "source-tag-map"
  }
}

input {
  name: "source-tag-to-category"
  Part {
    file_pattern: "source-tag-to-category"
  }
}
input {
  name: "source-label-map"
  Part {
    file_pattern: "source-label-map"
  }
}
input {
  name: "source-char-ngram-map"
  Part {
    file_pattern: "source-char-ngram-map"
  }
}
input {
  name: "source-prefix-table"
  Part {
    file_pattern: "source-prefix-table"
  }
}
input {
  name: "source-suffix-table"
  Part {
    file_pattern: "source-suffix-table"
  }
}
input {
  name: "source-morph-label-set"
  Part {
    file_pattern: "source-morph-label-set"
  }
}
input {
  name: "source-morphology-map"
  Part {
    file_pattern: "source-morphology-map"
  }
}

input {
  name: "word-map"
  Part {
    file_pattern: "word-map"
  }
}
input {
  name: "category-map"
  Part {
    file_pattern: "category-map"
  }
}
input {
  name: "lcword-map"
  Part {
    file_pattern: "lcword-map"
  }
}
input {
  name: "char-map"
  Part {
    file_pattern: "char-map"
  }
}
input {
  name: "tag-map"
  Part {
    file_pattern: "tag-map"
  }
}

input {
  name: "tag-to-category"
  Part {
    file_pattern: "tag-to-category"
  }
}
input {
  name: "label-map"
  Part {
    file_pattern: "label-map"
  }
}
input {
  name: "char-ngram-map"
  Part {
    file_pattern: "char-ngram-map"
  }
}
input {
  name: "prefix-table"
  Part {
    file_pattern: "prefix-table"
  }
}
input {
  name: "suffix-table"
  Part {
    file_pattern: "suffix-table"
  }
}
input {
  name: "morph-label-set"
  Part {
    file_pattern: "morph-label-set"
  }
}
input {
  name: "morphology-map"
  Part {
    file_pattern: "morphology-map"
  }
}

input {
  name: 'stdin'
  record_format: 'tokenized-text'
  Part {
    file_pattern: '-'
  }
}
input {
  name: 'stdin-conll'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '-'
  }
}
input {
  name: 'stdin-untoken'
  record_format: 'untokenized-text'
  Part {
    file_pattern: '-'
  }
}
input {
  name: 'stdout-conll'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '-'
  }
}

input {
  name: 'nc-fr-noblank'
  record_format: 'untokenized-text'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.fr.noblank'
  }
}

input {
  name: 'nc-en-noblank'
  record_format: 'untokenized-text'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.en.noblank'
  }
}


input {
  name: 'nc-fr-tkn'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.fr.tkn'
  }
}

input {
  name: 'nc-en-tkn'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.en.tkn'
  }
}


input {
  name: 'nc-fr-morph'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.fr.morph'
  }
}

input {
  name: 'nc-en-morph'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.en.morph'
  }
}

input {
  name: 'nc-fr-tag'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.fr.tag'
  }
}

input {
  name: 'nc-en-tag'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.en.tag'
  }
}

input {
  name: 'nc-fr-parse'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.fr.parse'
  }
}

input {
  name: 'nc-en-parse'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.en.parse'
  }
}

input {
  name: 'nc-inv-fr-noblank'
  record_format: 'untokenized-text'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.inv.fr.noblank'
  }
}

input {
  name: 'nc-inv-en-noblank'
  record_format: 'untokenized-text'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.inv.en.noblank'
  }
}


input {
  name: 'nc-inv-fr-tkn'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.inv.fr.tkn'
  }
}

input {
  name: 'nc-inv-en-tkn'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.inv.en.tkn'
  }
}


input {
  name: 'nc-inv-fr-morph'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.inv.fr.morph'
  }
}

input {
  name: 'nc-inv-en-morph'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.inv.en.morph'
  }
}

input {
  name: 'nc-inv-fr-tag'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.inv.fr.tag'
  }
}

input {
  name: 'nc-inv-en-tag'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.inv.en.tag'
  }
}

input {
  name: 'nc-inv-fr-parse'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.inv.fr.parse'
  }
}

input {
  name: 'nc-inv-en-parse'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.inv.en.parse'
  }
}

input {
  name: 'nc-mrg-fr-en'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.fr.en.mrg'
  }
}
input {
  name: 'nc-mrg-fr-en-train'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.fr.en.mrg.train'
  }
}
input {
  name: 'nc-mrg-fr-en-dev'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.fr.en.mrg.dev'
  }
}

input {
  name: 'nc-mrg-en-fr'
  record_format: 'conll-sentence'
  Part {
    file_pattern: '/local/home/ykilcher/tmp/fr-en.en.fr.mrg'
  }
}
Parameter {
  name: "brain_translator_embedding_dims"
  value: "1;1;32;32;256;32;256"
}
Parameter {
  name: "brain_translator_embedding_names"
  value: "sourcelengths;sourceheads;sourcelabels;sourcetags;sourcewords;labels;words"
}

Parameter {
  name: "brain_translator_features"
  value: "source(0).sourcelength; "
         "source(0).sourcehead.focus "
         "source(1).sourcehead.focus "
         "source(2).sourcehead.focus "
         "source(3).sourcehead.focus "
         "source(4).sourcehead.focus "
         "source(5).sourcehead.focus "
         "source(6).sourcehead.focus "
         "source(7).sourcehead.focus "
         "source(8).sourcehead.focus "
         "source(9).sourcehead.focus; "
         "source(0).sourcelabel "
         "source(1).sourcelabel "
         "source(2).sourcelabel "
         "source(3).sourcelabel "
         "source(4).sourcelabel "
         "source(5).sourcelabel "
         "source(6).sourcelabel "
         "source(7).sourcelabel "
         "source(8).sourcelabel "
         "source(9).sourcelabel; "
         "source(0).sourcetag "
         "source(1).sourcetag "
         "source(2).sourcetag "
         "source(3).sourcetag "
         "source(4).sourcetag "
         "source(5).sourcetag "
         "source(6).sourcetag "
         "source(7).sourcetag "
         "source(8).sourcetag "
         "source(9).sourcetag; "
         "source(0).sourceword "
         "source(1).sourceword "
         "source(2).sourceword "
         "source(3).sourceword "
         "source(4).sourceword "
         "source(5).sourceword "
         "source(6).sourceword "
         "source(7).sourceword "
         "source(8).sourceword "
         "source(9).sourceword; "
         "stack(0).label "
         "stack(1).label "
         "stack(2).label "
         "stack(3).label "
         "stack(4).label "
         "stack(5).label "
         "stack(6).label "
         "stack(7).label "
         "stack(8).label "
         "stack(9).label "
         "buffer(0).label "
         "buffer(1).label "
         "buffer(2).label "
         "buffer(3).label "
         "buffer(4).label "
         "buffer(5).label "
         "buffer(6).label "
         "buffer(7).label "
         "buffer(8).label "
         "buffer(9).label; "
         "buffer(0).word "
         "buffer(1).word "
         "buffer(2).word "
         "buffer(3).word "
         "buffer(4).word "
         "buffer(5).word "
         "buffer(6).word "
         "buffer(7).word "
         "buffer(8).word "
         "buffer(9).word "
}

Parameter {
  name: "brain_translator_features_old"
  value: "stack.child(1).label "
         "stack.child(1).sibling(-1).label "
         "stack.child(-1).label "
         "stack.child(-1).sibling(1).label "
         "stack.child(2).label "
         "stack.child(-2).label "
         "stack(1).child(1).label "
         "stack(1).child(1).sibling(-1).label "
         "stack(1).child(-1).label "
         "stack(1).child(-1).sibling(1).label "
         "stack(1).child(2).label "
         "stack(1).child(-2).label; "
         "stack.token.morphology-set "
         "stack.child(1).token.morphology-set "
         "stack.child(1).sibling(-1).token.morphology-set "
         "stack.child(-1).token.morphology-set "
         "stack.child(-1).sibling(1).token.morphology-set "
         "stack.child(2).token.morphology-set "
         "stack.child(-2).token.morphology-set "
         "stack(1).token.morphology-set "
         "stack(1).child(1).token.morphology-set "
         "stack(1).child(1).sibling(-1).token.morphology-set "
         "stack(1).child(-1).token.morphology-set "
         "stack(1).child(-1).sibling(1).token.morphology-set "
         "stack(1).child(2).token.morphology-set "
         "stack(1).child(-2).token.morphology-set "
         "stack(2).token.morphology-set "
         "stack(3).token.morphology-set; "
         "stack.token.tag "
         "stack.child(1).token.tag "
         "stack.child(1).sibling(-1).token.tag "
         "stack.child(-1).token.tag "
         "stack.child(-1).sibling(1).token.tag "
         "stack.child(2).token.tag "
         "stack.child(-2).token.tag "
         "stack(1).token.tag "
         "stack(1).child(1).token.tag "
         "stack(1).child(1).sibling(-1).token.tag "
         "stack(1).child(-1).token.tag "
         "stack(1).child(-1).sibling(1).token.tag "
         "stack(1).child(2).token.tag "
         "stack(1).child(-2).token.tag "
         "stack(2).token.tag "
         "stack(3).token.tag; "
         "stack.token.word "
         "stack.child(1).token.word "
         "stack.child(1).sibling(-1).token.word "
         "stack.child(-1).token.word "
         "stack.child(-1).sibling(1).token.word "
         "stack.child(2).token.word "
         "stack.child(-2).token.word "
         "stack(1).token.word "
         "stack(1).child(1).token.word "
         "stack(1).child(1).sibling(-1).token.word "
         "stack(1).child(-1).token.word "
         "stack(1).child(-1).sibling(1).token.word "
         "stack(1).child(2).token.word "
         "stack(1).child(-2).token.word "
         "stack(2).token.word "
         "stack(3).token.word "
}
Parameter {
  name: "brain_translator_transition_system"
  value: "arc-standard"
}
